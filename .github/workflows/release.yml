name: release

on:
  push:
    branches:
      - release-test
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  pull-requests: write
  contents: write

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

# Debug stuff
      - name: Determine Git user info from GitHub token
        shell: bash
        run: |
          if [ -z "${GITHUB_TOKEN+x}" ]; then
            echo "Error: environment variable GITHUB_TOKEN is undefined"
            exit 1
          fi

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: environment variable GITHUB_TOKEN is empty"
            exit 1
          fi

          # The environment variable GITHUB_TOKEN is read by the `gh` cli
          VIEWER_JSON=$(gh api graphql -f query='query { viewer { name login databaseId }}' --jq '.data.viewer')
          echo $VIEWER_JSON
          VIEWER_NAME=$(jq --raw-output '.name | values' <<< "${VIEWER_JSON}")
          VIEWER_LOGIN=$(jq --raw-output '.login' <<< "${VIEWER_JSON}")
          VIEWER_DATABASE_ID=$(jq --raw-output '.databaseId' <<< "${VIEWER_JSON}")

          # Set the variable USER_NAME to the value of VIEWER_NAME if VIEWER_NAME is set and not null.
          # Otherwise, set USER_NAME to the value of VIEWER_LOGIN.
          USER_NAME="${VIEWER_NAME:-${VIEWER_LOGIN}}"
          USER_EMAIL="${VIEWER_DATABASE_ID}+${VIEWER_LOGIN}@users.noreply.github.com"

          git config --global user.name ${USER_NAME}
          git config --global user.email ${USER_EMAIL}

          echo "name=${USER_NAME}" >> "${GITHUB_OUTPUT}"
          echo "email=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}

      # - name: Run release-plz
      #   uses: MarcoIeni/release-plz-action@v0.5
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
